{"ast":null,"code":"import _toConsumableArray from \"/Users/NA20449262/Desktop/nayan/ReactProjects/E-Commerce_Site/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport { createSlice } from \"@reduxjs/toolkit\";\nvar initialState = localStorage.getItem('cart') ? JSON.parse(localStorage.getItem('cart')) : {\n  cartItems: []\n};\nvar cartSlice = createSlice({\n  name: 'cart',\n  initialState: initialState,\n  reducers: {\n    //state is current state of the cart and action is data in the payload\n    addToCart: function addToCart(state, action) {\n      var item = action.payload;\n      var existItem = state.cartItems.find(function (x) {\n        return x._id === item._id;\n      }); //to check if the item exists in the cart or not\n\n      //if item exist then we will add that item to existing items\n      if (existItem) {\n        state.cartItems = state.cartItems.map(function (x) {\n          return x._id == existItem._id ? item : x;\n        });\n      }\n\n      //if item doesnt exist then we will add that item to cart\n      else {\n        state.cartItems = [].concat(_toConsumableArray(state.cartItems), [item]);\n      }\n    }\n  }\n});\nvar addToCart = cartSlice.actions.addToCart;\nexport { addToCart };\nexport default cartSlice.reducer;","map":{"version":3,"names":["createSlice","initialState","localStorage","getItem","JSON","parse","cartItems","cartSlice","name","reducers","addToCart","state","action","item","payload","existItem","find","x","_id","map","concat","_toConsumableArray","actions","reducer"],"sources":["/Users/NA20449262/Desktop/nayan/ReactProjects/E-Commerce_Site/client/src/slices/cartSlice.js"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\n\n\nconst initialState =localStorage.getItem('cart') ? JSON.parse(localStorage.getItem('cart')):\n{cartItems:[]};\n\n\nconst cartSlice = createSlice({\n    name:'cart',\n    initialState,\n    reducers:{\n        //state is current state of the cart and action is data in the payload\n        addToCart:(state,action)=>{\n            const item = action.payload;\n            const existItem = state.cartItems.find((x)=> x._id ===item._id);//to check if the item exists in the cart or not\n            \n            //if item exist then we will add that item to existing items\n            if(existItem){\n                state.cartItems = state.cartItems.map((x)=>\n                    x._id == existItem._id ?item:x\n                )\n\n            }\n\n            //if item doesnt exist then we will add that item to cart\n            else{\n                state.cartItems = [...state.cartItems,item];\n            }\n\n           \n        }\n    },\n})\n\nexport const {addToCart} = cartSlice.actions;\n\nexport default cartSlice.reducer;"],"mappings":";AAAA,SAASA,WAAW,QAAQ,kBAAkB;AAG9C,IAAMC,YAAY,GAAEC,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC,GAAGC,IAAI,CAACC,KAAK,CAACH,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC,CAAC,GAC3F;EAACG,SAAS,EAAC;AAAE,CAAC;AAGd,IAAMC,SAAS,GAAGP,WAAW,CAAC;EAC1BQ,IAAI,EAAC,MAAM;EACXP,YAAY,EAAZA,YAAY;EACZQ,QAAQ,EAAC;IACL;IACAC,SAAS,EAAC,SAAAA,UAACC,KAAK,EAACC,MAAM,EAAG;MACtB,IAAMC,IAAI,GAAGD,MAAM,CAACE,OAAO;MAC3B,IAAMC,SAAS,GAAGJ,KAAK,CAACL,SAAS,CAACU,IAAI,CAAC,UAACC,CAAC;QAAA,OAAIA,CAAC,CAACC,GAAG,KAAIL,IAAI,CAACK,GAAG;MAAA,EAAC,CAAC;;MAEhE;MACA,IAAGH,SAAS,EAAC;QACTJ,KAAK,CAACL,SAAS,GAAGK,KAAK,CAACL,SAAS,CAACa,GAAG,CAAC,UAACF,CAAC;UAAA,OACpCA,CAAC,CAACC,GAAG,IAAIH,SAAS,CAACG,GAAG,GAAEL,IAAI,GAACI,CAAC;QAAA,CAClC,CAAC;MAEL;;MAEA;MAAA,KACI;QACAN,KAAK,CAACL,SAAS,MAAAc,MAAA,CAAAC,kBAAA,CAAOV,KAAK,CAACL,SAAS,IAACO,IAAI,EAAC;MAC/C;IAGJ;EACJ;AACJ,CAAC,CAAC;AAAA,IAEYH,SAAS,GAAIH,SAAS,CAACe,OAAO,CAA9BZ,SAAS;AAAA,SAAAA,SAAA;AAEvB,eAAeH,SAAS,CAACgB,OAAO"},"metadata":{},"sourceType":"module"}