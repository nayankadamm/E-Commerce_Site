{"ast":null,"code":"import _toConsumableArray from \"/Users/NA20449262/Desktop/nayan/ReactProjects/E-Commerce_Site/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport { createSlice } from \"@reduxjs/toolkit\";\nimport { upadateCart } from \"../utils/cartUtils\";\nvar initialState = localStorage.getItem(\"cart\") ? JSON.parse(localStorage.getItem(\"cart\")) : {\n  cartItems: [],\n  shippingAddress: {},\n  paymentMethod: 'PayPal'\n};\nvar cartSlice = createSlice({\n  name: \"cart\",\n  initialState: initialState,\n  reducers: {\n    //state is current state of the cart and action is data in the payload\n    addToCart: function addToCart(state, action) {\n      var item = action.payload;\n      var existItem = state.cartItems.find(function (x) {\n        return x._id === item._id;\n      }); //to check if the item exists in the cart or not\n      //if item exist then we will add that item to existing items\n      if (existItem) {\n        state.cartItems = state.cartItems.map(function (x) {\n          return x._id === existItem._id ? item : x;\n        });\n      }\n      //if item doesnt exist then we will add that item to cart\n      else {\n        state.cartItems = [].concat(_toConsumableArray(state.cartItems), [item]);\n      }\n      return upadateCart(state);\n    },\n    removeFromCart: function removeFromCart(state, action) {\n      state.cartItems = state.cartItems.filter(function (x) {\n        return x._id !== action.payload;\n      });\n      return upadateCart(state);\n    },\n    saveShippingAddress: function saveShippingAddress(state, action) {\n      state.shippingAddress = action.payload;\n      localStorage.setItem('cart', JSON.stringify(state));\n    }\n  }\n});\nvar _cartSlice$actions = cartSlice.actions,\n  addToCart = _cartSlice$actions.addToCart,\n  removeFromCart = _cartSlice$actions.removeFromCart,\n  saveShippingAddress = _cartSlice$actions.saveShippingAddress;\nexport { addToCart, removeFromCart, saveShippingAddress };\nexport default cartSlice.reducer;","map":{"version":3,"names":["createSlice","upadateCart","initialState","localStorage","getItem","JSON","parse","cartItems","shippingAddress","paymentMethod","cartSlice","name","reducers","addToCart","state","action","item","payload","existItem","find","x","_id","map","concat","_toConsumableArray","removeFromCart","filter","saveShippingAddress","setItem","stringify","_cartSlice$actions","actions","reducer"],"sources":["/Users/NA20449262/Desktop/nayan/ReactProjects/E-Commerce_Site/client/src/slices/cartSlice.js"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\n\nimport { upadateCart } from \"../utils/cartUtils\";\n\nconst initialState = localStorage.getItem(\"cart\")\n  ? JSON.parse(localStorage.getItem(\"cart\"))\n  : { cartItems: [],shippingAddress:{},paymentMethod:'PayPal' };\n\nconst cartSlice = createSlice(\n  {\n  name: \"cart\",\n  initialState,\n  reducers: {\n    //state is current state of the cart and action is data in the payload\n    addToCart: (state, action) => {\n      const item = action.payload;\n      const existItem = state.cartItems.find((x) => x._id === item._id); //to check if the item exists in the cart or not\n      //if item exist then we will add that item to existing items\n      if (existItem) {\n        state.cartItems = state.cartItems.map((x) =>\n          x._id === existItem._id ? item : x\n        );\n      }\n      //if item doesnt exist then we will add that item to cart\n      else \n      {\n        state.cartItems = [...state.cartItems, item];\n      }\n\n      return upadateCart(state);\n    },\n    removeFromCart: (state, action) =>\n    {\n      state.cartItems = state.cartItems.filter((x) => x._id !== action.payload);\n      return upadateCart(state);\n    },\n    saveShippingAddress:(state,action)=>{\n      state.shippingAddress = action.payload;\n      localStorage.setItem('cart',JSON.stringify(state));\n    }\n  },\n});\n\nexport const { addToCart, removeFromCart,saveShippingAddress} = cartSlice.actions;\n\nexport default cartSlice.reducer;\n"],"mappings":";AAAA,SAASA,WAAW,QAAQ,kBAAkB;AAE9C,SAASC,WAAW,QAAQ,oBAAoB;AAEhD,IAAMC,YAAY,GAAGC,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC,GAC7CC,IAAI,CAACC,KAAK,CAACH,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC,CAAC,GACxC;EAAEG,SAAS,EAAE,EAAE;EAACC,eAAe,EAAC,CAAC,CAAC;EAACC,aAAa,EAAC;AAAS,CAAC;AAE/D,IAAMC,SAAS,GAAGV,WAAW,CAC3B;EACAW,IAAI,EAAE,MAAM;EACZT,YAAY,EAAZA,YAAY;EACZU,QAAQ,EAAE;IACR;IACAC,SAAS,EAAE,SAAAA,UAACC,KAAK,EAAEC,MAAM,EAAK;MAC5B,IAAMC,IAAI,GAAGD,MAAM,CAACE,OAAO;MAC3B,IAAMC,SAAS,GAAGJ,KAAK,CAACP,SAAS,CAACY,IAAI,CAAC,UAACC,CAAC;QAAA,OAAKA,CAAC,CAACC,GAAG,KAAKL,IAAI,CAACK,GAAG;MAAA,EAAC,CAAC,CAAC;MACnE;MACA,IAAIH,SAAS,EAAE;QACbJ,KAAK,CAACP,SAAS,GAAGO,KAAK,CAACP,SAAS,CAACe,GAAG,CAAC,UAACF,CAAC;UAAA,OACtCA,CAAC,CAACC,GAAG,KAAKH,SAAS,CAACG,GAAG,GAAGL,IAAI,GAAGI,CAAC;QAAA,CACpC,CAAC;MACH;MACA;MAAA,KAEA;QACEN,KAAK,CAACP,SAAS,MAAAgB,MAAA,CAAAC,kBAAA,CAAOV,KAAK,CAACP,SAAS,IAAES,IAAI,EAAC;MAC9C;MAEA,OAAOf,WAAW,CAACa,KAAK,CAAC;IAC3B,CAAC;IACDW,cAAc,EAAE,SAAAA,eAACX,KAAK,EAAEC,MAAM,EAC9B;MACED,KAAK,CAACP,SAAS,GAAGO,KAAK,CAACP,SAAS,CAACmB,MAAM,CAAC,UAACN,CAAC;QAAA,OAAKA,CAAC,CAACC,GAAG,KAAKN,MAAM,CAACE,OAAO;MAAA,EAAC;MACzE,OAAOhB,WAAW,CAACa,KAAK,CAAC;IAC3B,CAAC;IACDa,mBAAmB,EAAC,SAAAA,oBAACb,KAAK,EAACC,MAAM,EAAG;MAClCD,KAAK,CAACN,eAAe,GAAGO,MAAM,CAACE,OAAO;MACtCd,YAAY,CAACyB,OAAO,CAAC,MAAM,EAACvB,IAAI,CAACwB,SAAS,CAACf,KAAK,CAAC,CAAC;IACpD;EACF;AACF,CAAC,CAAC;AAAC,IAAAgB,kBAAA,GAE6DpB,SAAS,CAACqB,OAAO;EAAlElB,SAAS,GAAAiB,kBAAA,CAATjB,SAAS;EAAEY,cAAc,GAAAK,kBAAA,CAAdL,cAAc;EAACE,mBAAmB,GAAAG,kBAAA,CAAnBH,mBAAmB;AAAA,SAAAd,SAAA,EAAAY,cAAA,EAAAE,mBAAA;AAE5D,eAAejB,SAAS,CAACsB,OAAO"},"metadata":{},"sourceType":"module"}